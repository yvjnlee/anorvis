---
description: Component creation rules for SatÅ«s
globs: "**/*.tsx,**/*.jsx"
alwaysApply: false
---
---
description: Component creation guidelines
globs: *.tsx, *.jsx, *.css, *.js, *.ts
---

## Imports and Dependencies

1. **Utility Functions**
   - Always use `cn` from `clsx` for className conditionals
   ```tsx
   import cn from 'clsx'
   
   function MyComponent({ className }) {
     return <div className={cn(s.component, className)} />
   }
   ```

2. **Base UI Components**
   - Use components from `@base-ui-components/react` when available
   ```tsx
   import { Select } from '@base-ui-components/react/select'
   ```

3. **Animation Libraries**
   - Use `gsap` for complex animations
   - Use `lenis` for smooth scrolling
   - Use `tempus` for timing utilities
   - Use `hamo` for DOM utilities

## Component Structure

1. **CSS Modules**
   - Use CSS modules for component styling
   - Import styles as `s`
   ```tsx
   import s from './component-name.module.css'
   ```

2. **Client Components**
   - Add 'use client' directive for client components
   ```tsx
   'use client'
   
   import { useState } from 'react'
   ```

3. **Props Interface**
   - Define props interface at the top of the file
   - Extend HTML attributes when appropriate
   - Use proper type imports
   ```tsx
   import type { ComponentProps } from 'react'
   
   interface ButtonProps extends ComponentProps<'button'> {
     variant?: 'primary' | 'secondary'
     size?: 'sm' | 'md' | 'lg'
   }
   ```

4. **React 19 Ref Handling**
   - In React 19, ref is passed as a regular prop (no forwardRef needed)
   ```tsx
   // Old pattern (React 18)
   // const Button = forwardRef<HTMLButtonElement, ButtonProps>(...)
   
   // New pattern (React 19)
   function Button({ ref, variant = 'primary', ...props }: ButtonProps & { ref?: React.Ref<HTMLButtonElement> }) {
     return <button ref={ref} {...props} />
   }
   ```

5. **Default Exports**
   - Use named function declarations for components
   - Export the component as default
   ```tsx
   function Button({ variant = 'primary', size = 'md', ...props }: ButtonProps) {
     // component logic
   }
   
   export default Button
   ```

## WebGL Components

1. **Three.js Integration**
   - Use React Three Fiber for Three.js integration
   - Import components from `@react-three/drei` for common 3D needs
   ```tsx
   import { Canvas } from '~/webgl/components/canvas'
   import { useThree } from '@react-three/fiber'
   import { OrbitControls } from '@react-three/drei'
   ```

2. **WebGL Structure**
   - Separate Three.js components from React components
   - Use a `.webgl.tsx` file for Three.js specific logic
   ```tsx
   // component.tsx
   import WebGL from './component.webgl'
   
   // component.webgl.tsx
   export default function WebGL() {
     // Three.js specific code
   }
   ```

## Form Components

1. **Form Handling**
   - Use custom form hooks when appropriate
   - Connect to integrations for external services
   - Implement proper validation
   ```tsx
   import { useForm } from '~/components/form/hook'
   import { HubspotNewsletterAction } from '~/integrations/hubspot/action'
   ```

2. **Server Actions**
   - Use Server Actions for form submissions when possible
   - Implement proper error handling
   ```tsx
   async function submitForm(formData: FormData) {
     'use server'
     // server-side logic
   }
   ```

## Responsive Design

1. **Device Detection**
   - Use `useDeviceDetection` hook from `~/hooks` for responsive logic
   ```tsx
   import { useDeviceDetection } from '~/hooks/use-device-detection'
   
   function ResponsiveComponent() {
     const { isMobile } = useDeviceDetection()
     return isMobile ? <MobileVersion /> : <DesktopVersion />
   }
   ```

2. **Viewport Units**
   - Use custom viewport units for responsive values
   ```css
   .element {
     width: mobile-vw(150);
     margin-top: desktop-vh(100);
   }
   ```

## Performance Best Practices

1. **Code Splitting**
   - Use `next/dynamic` for heavy components
   ```tsx
   import dynamic from 'next/dynamic'
   
   const HeavyComponent = dynamic(() => import('./HeavyComponent'), {
     loading: () => <div>Loading...</div>,
     ssr: false // if needed
   })
   ```

2. **Image Optimization**
   - **Always use the custom `Image` component (`~/components/image`) for all images. Do not use `next/image` directly.**
   - **In WebGL contexts, use `webgl/components/image`, which wraps the custom `Image` component for DOM fallback and WebGL texture integration.**
   ```tsx
   import { Image } from '~/components/image'
   // For WebGL:
   import { Image as WebGLImage } from '~/webgl/components/image'
   ```

3. **Memoization and React Compiler**
   - The React Compiler is enabled in this project and automatically optimizes most component re-renders and memoization.
   - **Avoid manual use of `useMemo`, `useCallback`, and `React.memo` unless you have a proven edge case** (e.g., non-serializable dependencies, refs, or when the compiler cannot optimize).
   - Refer to the [React Compiler documentation](mdc:https:/react.dev/reference/react/compiler) for best practices and up-to-date guidance.

## Error Handling

1. **Error Boundaries**
   - Implement error boundaries for critical sections
   - Provide meaningful fallback UI

2. **Loading States**
   - Always handle loading states
   - Use Suspense boundaries where appropriate

Last updated: 2025-05-23 